@PieceOfCake.registerController("TabController")
class extends PieceOfCake.Controller {
    static elements = {
        content: "tab-content-section"
    }

    static fields = {
        "activeTab": {
            defaultValue: 0,
        }
    }

    constructor(el)Â {
        super(el)
        // these function gets generated by the corresponding fields entry
        this.onActiveTabChanged(this._renderTabContent.bind(this))
        this._renderTabContent()
    }

    onChangeTab(idx) {
        this.activeTab = idx
    }

    _renderTabContent() {
        const button = document.createElement("button")
        //  one can create bindings to controllers dynamically like this
        //  also, you may 
        button.dataset.controller = `CounterController#${this.activeTab}`
        button.dataset.id = "button"
        button.setAttribute("onclick", "onClick")
        this.content.innerHTML = ""
        this.content.appendChild(button)
        //  when dynamically destroy or create elements with an data-controller binding
        //  - you should call init:
        //      to create the controllers now(!), otherwise they wont be created 
        //      before they have to handle their first event
        //  - you should call clean:
        //      to destroy controllers that belong to elements that got removed
        //      from the DOM
        PieceOfCake.clean(this.content)
        PieceOfCake.init(this.content)
    }
}

@PieceOfCake.registerController("CounterController")
class extends PieceOfCake.Controller {
    static fields = {
        "value": {
            defaultValue: 0,
            // these function will be called on every field change
            // if the value is a string it means 'call the class method with this name'
            onChange: [
                console.log,
                "_renderButton"
            ]
        }
    }

    // this will be called by the constructor of Controller
    // it is basically just shorthand for 
    // constructor(el) {
    //     super(el)
    //     doWhateverYouWant()
    // }
    init() {
        this._renderButton()
    }

    onClick() {
        this.value++
    }

    _renderButton() {
        this.el.innerText = this.value
    }
}